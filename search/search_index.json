{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Aiogram Ton Connect UI","text":""},{"location":"#introduction","title":"Introduction","text":"<p>aiogram-tonconnect is a library that simplifies the integration of TonConnect functionality into Telegram bots developed with the aiogram framework.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Ready-to-Use User Interface</li> <li>Middleware Functionality</li> <li>Interface Customization</li> <li>Multilingual Support</li> <li>QR Code Generation</li> </ul>"},{"location":"#concept","title":"Concept","text":"<p>The library concept is based on predefined logic for processing and switching between bot windows. To implement it, you need to install the middleware and register a handler. You then have access to <code>atc_manager</code>, which can be accessed in handlers; it provides custom transitions between windows to connect to a wallet or send a transaction.</p> <p>There are two main methods within the library: <code>connect_wallet</code> and <code>send_transaction</code>.</p> <ul> <li> <p>The <code>connect_wallet</code> method is used to direct the user to the wallet connection menu, where a QR code and wallet   selection buttons are generated.</p> </li> <li> <p>The <code>send_transaction</code> method is used to initiate the sending of a transaction. It triggers a transaction confirmation   request to the user's wallet.</p> </li> </ul>"},{"location":"advanced-guide/customizing-buttons/","title":"Customizing buttons","text":"<p>Coming soon, stay tuned...</p>"},{"location":"advanced-guide/customizing-texts/","title":"Customizing texts","text":"<p>Coming soon, stay tuned...</p>"},{"location":"advanced-guide/multilanguage-support/","title":"Multilanguage support","text":"<p>Coming soon, stay tuned...</p>"},{"location":"advanced-guide/qrcode-provider/","title":"QRcode provider","text":"<p>Coming soon, stay tuned...</p>"},{"location":"user-guide/connecting-wallet/","title":"Connecting wallet","text":""},{"location":"user-guide/connecting-wallet/#introduction","title":"Introduction","text":"<p>Description:</p> <ul> <li> <p>ATCMager:   The main control class is which is responsible for managing the transition of windows, connecting a   wallet and sending transactions.</p> </li> <li> <p>connect_wallet:   The main method of the ATCManager class, used to present the wallet connection window to users.</p> </li> <li> <p>ConnectWalletCallbacks:   The core set of callbacks required by the connect_wallet method. It plays a decisive role in circulation   actions during and after the wallet connection process.</p> </li> <li> <p>before_callback:   The callback function in ConnectWalletCallbacks is triggered when users click the back button in the wallet   connection window.</p> </li> <li> <p>after_callback:   A callback function in ConnectWalletCallbacks that is executed after a successful connection to the wallet. He   transmits comprehensive information for processors.</p> </li> </ul> <p>The ATCManager class is automatically distributed to all handlers as an atc_manager object via middleware. The <code>connect_wallet</code> method, requiring one argument, ConnectWalletCallbacks acts as a gateway to present the wallet connection window. This set of callbacks, consisting of <code>before_callback</code> and <code>after_callback</code>.</p> <p>Callback examples:</p> <p>In our example, two callback functions will be created: <code>select_language_window</code> and <code>main_menu_window</code>.</p> <ul> <li> <p>before_callback: <code>select_language_window</code>   This callback is used when the Start button is clicked or the /start command is entered to prompt the user for a   language choice.</p> </li> <li> <p>after_callback: <code>main_menu_window</code>   This callback is the main menu that displays information about the connected wallet address and the one being used   wallet. In addition, there is a button to disable the wallet.</p> </li> </ul>"},{"location":"user-guide/connecting-wallet/#writing-windows","title":"Writing windows","text":"<p>This section defines window functions for callbacks and user state. Open the <code>windows.py</code> file and insert the following code:</p>"},{"location":"user-guide/connecting-wallet/#user-state","title":"User State","text":"windows.py<pre><code>from aiogram.fsm.state import StatesGroup, State\nfrom aiogram.types import User\nfrom aiogram.types import InlineKeyboardButton as Button, User\nfrom aiogram.types import InlineKeyboardMarkup as Markup\nfrom aiogram.utils import markdown\n\nfrom aiogram_tonconnect import ATCManager\nfrom aiogram_tonconnect.tonconnect.models import AccountWallet, AppWallet\n\n\n# Define a state group for the user with two states\nclass UserState(StatesGroup):\n    select_language = State()\n    main_menu = State()\n</code></pre> <p>In this section, a custom UserState class is defined, which extends the StatesGroup class from the aiogram.fsm.state module. It represents different states that the user can be in.</p>"},{"location":"user-guide/connecting-wallet/#select-language-window","title":"Select language window","text":"windows.py<pre><code>async def select_language_window(event_from_user: User, atc_manager: ATCManager, **_) -&gt; None:\n    \"\"\"\n    Displays the language selection window.\n\n   :param event_from_user: Telegram user object from middleware.\n   :param atc_manager: ATCManager instance for managing TON Connect integration.\n   :param_: Unused data from the middleware.\n   :return: No\n    \"\"\"\n    # Code for generating text based on the user's language\n    text = (\n        f\"\u041f\u0440\u0438\u0432\u0435\u0442, {markdown.hbold(event_from_user.full_name)}!\\n\\n\"\n        \"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u044f\u0437\u044b\u043a:\"\n        if atc_manager.user.language_code == \"ru\" else\n        f\"Hello, {markdown.hbold(event_from_user.full_name)}!\\n\\n\"\n        f\"Select language:\"\n    )\n\n    # Code for creating inline keyboard with language options\n    reply_markup = Markup(inline_keyboard=[\n        [Button(text=\"\u0420\u0443\u0441\u0441\u043a\u0438\u0439\", callback_data=\"ru\"),\n         Button(text=\"English\", callback_data=\"en\")]\n    ])\n\n    # Sending the message and updating user state\n    await atc_manager._send_message(text, reply_markup=reply_markup)\n    await atc_manager.state.set_state(UserState.select_language)\n</code></pre> <p>This function represents the window for selecting the language. It generates appropriate text based on the user's language and creates an inline keyboard for language selection.</p>"},{"location":"user-guide/connecting-wallet/#main-menu-window","title":"Main menu window","text":"windows.py<pre><code>async def main_menu_window(atc_manager: ATCManager, app_wallet: AppWallet,\n                           account_wallet: AccountWallet, **_) -&gt; None:\n    \"\"\"\n    Displays the main menu window.\n\n    :param atc_manager: ATCManager instance for managing TON Connect integration.\n    :param app_wallet: AppWallet instance representing the connected wallet application.\n    :param account_wallet: AccountWallet instance representing the connected wallet account.\n    :param _: Unused data from the middleware.\n    :return: None\n    \"\"\"\n    # Code for generating text with connected wallet information\n    text = (\n        f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u0448\u0435\u043b\u0435\u043a {app_wallet.name}:\\n\\n\"\n        f\"{markdown.hcode(account_wallet.address)}\"\n        if atc_manager.user.language_code == \"ru\" else\n        f\"Connected wallet {app_wallet.name}:\\n\\n\"\n        f\"{markdown.hcode(account_wallet.address)}\"\n    )\n\n    # Code for creating inline keyboard with disconnect option\n    button_text = \"\u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f\" if atc_manager.user.language_code == \"ru\" else \"Disconnect\"\n    reply_markup = Markup(inline_keyboard=[\n        [Button(text=button_text, callback_data=\"disconnect\")],\n    ])\n\n    # Sending the message and updating user state\n    await atc_manager._send_message(text, reply_markup=reply_markup)\n    await atc_manager.state.set_state(UserState.main_menu)\n</code></pre> <p>This function represents the main menu window. It generates text with information about the connected wallet and creates an inline keyboard with a disconnect option.</p>"},{"location":"user-guide/connecting-wallet/#writing-handlers","title":"Writing Handlers","text":"<p>In this section, handlers for commands and callback queries are defined. Open the <code>handlers.py</code> file and insert the following code:</p>"},{"location":"user-guide/connecting-wallet/#router-configuration","title":"Router Configuration","text":"handlers.py<pre><code>from contextlib import suppress\n\nfrom aiogram import Router, F\nfrom aiogram.enums import ChatType\nfrom aiogram.filters import Command\nfrom aiogram.types import Message, CallbackQuery\nfrom pytonconnect.exceptions import WalletNotConnectedError\n\nfrom aiogram_tonconnect import ATCManager\nfrom aiogram_tonconnect.tonconnect.models import ConnectWalletCallbacks\n\nfrom .windows import UserState, select_language_window, main_menu_window\n\n# Router Configuration\nrouter = Router()\nrouter.message.filter(F.chat.type == ChatType.PRIVATE)\nrouter.callback_query.filter(F.message.chat.type == ChatType.PRIVATE)\n</code></pre> <p>The router is configured to filter messages and callback queries only from private chats.</p>"},{"location":"user-guide/connecting-wallet/#start-command-handler","title":"Start Command Handler","text":"handlers.py<pre><code>@router.message(Command(\"start\"))\nasync def start_command(message: Message, atc_manager: ATCManager) -&gt; None:\n    \"\"\"\n    Handler for the /start command.\n\n    :param message: The Message object representing the incoming command.\n    :param atc_manager: ATCManager instance for managing TON Connect integration.\n    :return: None\n    \"\"\"\n    # Calling up the language selection window\n    await select_language_window(message.from_user, atc_manager)\n</code></pre> <p>This handler is triggered when a user sends the /start command. It initiates the language selection window.</p>"},{"location":"user-guide/connecting-wallet/#select-language-handler","title":"Select Language Handler","text":"handlers.py<pre><code>@router.callback_query(UserState.select_language)\nasync def select_language_handler(call: CallbackQuery, atc_manager: ATCManager) -&gt; None:\n    \"\"\"\n    Handler for language selection callback.\n\n    :param call: The CallbackQuery object representing the callback.\n    :param atc_manager: ATCManager instance for managing TON Connect integration.\n    :return: None\n    \"\"\"\n    # Check if the call data is in supported languages:\n    if call.data in [\"ru\", \"en\"]:\n        # Updating the language in the aiogram-tonconnect interface\n        await atc_manager.update_interfaces_language(call.data)\n\n        # Create ConnectWalletCallbacks object \n        # with before_callback and after_callback functions\n        callbacks = ConnectWalletCallbacks(\n            before_callback=select_language_window,\n            after_callback=main_menu_window,\n        )\n        # Open the connect wallet window using the ATCManager instance\n        # and the specified callbacks\n        await atc_manager.connect_wallet(callbacks)\n\n    await call.answer()\n</code></pre> <p>This handler is triggered when a user selects a language. It updates the language and opens the connect wallet window.</p>"},{"location":"user-guide/connecting-wallet/#main-menu-handler","title":"Main Menu Handler","text":"handlers.py<pre><code>@router.callback_query(UserState.main_menu)\nasync def main_menu_handler(call: CallbackQuery, atc_manager: ATCManager) -&gt; None:\n    \"\"\"\n    Handler for the main menu callback.\n\n    :param call: The CallbackQuery object representing the callback.\n    :param atc_manager: ATCManager instance for managing TON Connect integration.\n    :return: None\n    \"\"\"\n    # Check if the user clicked the \"disconnect\" button\n    if call.data == \"disconnect\":\n        # Check if wallet is connected before attempting to disconnect\n        if atc_manager.tonconnect.connected:\n            # Disconnect from the wallet\n            await atc_manager.disconnect_wallet()\n\n        # Create ConnectWalletCallbacks object with before_callback \n        # and after_callback functions\n        callbacks = ConnectWalletCallbacks(\n            before_callback=select_language_window,\n            after_callback=main_menu_window,\n        )\n\n        # Open the connect wallet window using the ATCManager instance\n        # and the specified callbacks\n        await atc_manager.connect_wallet(callbacks)\n\n    await call.answer()\n</code></pre> <p>This handler is triggered when a user interacts with the main menu. It handles disconnecting and opening the connect wallet window.</p>"},{"location":"user-guide/connecting-wallet/#running-the-bot","title":"Running the Bot","text":"<p>To run the Bot, use the following command in your terminal:</p> <pre><code>python -m bot\n</code></pre> <p>The bot source code is available on GitHub.</p>"},{"location":"user-guide/getting-started/","title":"Getting started","text":""},{"location":"user-guide/getting-started/#installation","title":"Installation","text":"<p>Install the library:</p> <pre><code>pip install aiogram-tonconnect\n</code></pre> <p>Additionally, you will need to install Redis to store data about connected wallets.</p> <pre><code>apt install redis\n</code></pre>"},{"location":"user-guide/getting-started/#creating-manifestjson","title":"Creating manifest.json","text":"<p>Before you need to create a manifest to pass meta-information to the wallet. The manifest is a JSON file with the following format:</p> tonconnect-manifest.json<pre><code>{\n    \"url\": \"&lt;app-url&gt;\",                        // required\n    \"name\": \"&lt;app-name&gt;\",                      // required\n    \"iconUrl\": \"&lt;app-icon-url&gt;\",               // required\n    \"termsOfUseUrl\": \"&lt;terms-of-use-url&gt;\",     // optional\n    \"privacyPolicyUrl\": \"&lt;privacy-policy-url&gt;\" // optional\n}\n</code></pre> <p>Where:</p> <ul> <li><code>url</code>: Link to your bot or your website.</li> <li><code>name</code>: The name of your bot or your website.</li> <li><code>iconUrl</code>: Link to the avatar of your bot or your website.</li> <li><code>termsOfUseUrl</code>: Link to the terms of use (optional).</li> <li><code>privacyPolicyUrl</code>: Link to the privacy policy (optional).</li> </ul> <p>Note: Host this file on a hosting service or GitHub so that it is accessible via a link.</p>"},{"location":"user-guide/getting-started/#bot-structure","title":"Bot structure","text":"<p>The primary structure of the bot includes the following elements:</p> <pre><code>bot/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 __main__.py\n\u251c\u2500\u2500 handlers.py\n\u251c\u2500\u2500 windows.py\n</code></pre> <p>Where:</p> <ul> <li><code>__init__.py</code>: Informs Python that the bot folder should be treated as a package.</li> <li><code>__main__.py</code>: The main file where the bot object created, and the dispatcher is configured.</li> <li><code>handlers.py</code>: A module containing event and command handlers.</li> <li><code>windows.py</code>: A module where functions for creating bot windows are defined.</li> </ul>"},{"location":"user-guide/getting-started/#bot-initialization","title":"Bot initialization","text":"<p>Open the <code>__main__.py</code> file and insert the following code:</p> __main__.py<pre><code>from aiogram import Bot, Dispatcher\nfrom aiogram.fsm.storage.redis import RedisStorage\nfrom aiogram_tonconnect.handlers import AiogramTonConnectHandlers\nfrom aiogram_tonconnect.middleware import AiogramTonConnectMiddleware\n\n# Your bot token\nBOT_TOKEN = \"1234567890:QWERTYUIOPASDFGHJKLZXCVBNM\"\n\n# Redis address\nREDIS_DSN = \"redis://localhost:6379/0\"\n\n# Link to your created manifest.json\nMANIFEST_URL = \"https://raw.githubusercontent.com/nessshon/aiogram-tonconnect/main/tonconnect-manifest.json\"\n\n# List of wallets to exclude\nEXCLUDE_WALLETS = [\"mytonwallet\"]\n\n\nasync def main():\n    # Initializing the storage for FSM (Finite State Machine)\n    storage = RedisStorage.from_url(REDIS_DSN)\n\n    # Creating a bot object with the token and HTML parsing mode\n    bot = Bot(BOT_TOKEN, parse_mode=\"HTML\")\n\n    # Creating a dispatcher object using the specified storage\n    dp = Dispatcher(storage=storage)\n\n    # Registering middleware for TON Connect processing\n    dp.update.middleware.register(\n        AiogramTonConnectMiddleware(\n            redis=storage.redis,\n            manifest_url=MANIFEST_URL,\n            exclude_wallets=EXCLUDE_WALLETS,\n            qrcode_type=\"url\",  # or \"bytes\" if you prefer to generate QR codes locally.\n        )\n    )\n\n    # Registering TON Connect handlers\n    AiogramTonConnectHandlers().register(dp)\n\n    # Starting the bot using long polling\n    await dp.start_polling(bot)\n\n\nif __name__ == '__main__':\n    import asyncio\n\n    asyncio.run(main())\n</code></pre> <p>Note: Ensure that you replace the values of the variables <code>BOT_TOKEN</code>, <code>REDIS_DSN</code>, and others with the actual ones.</p>"},{"location":"user-guide/sending-transaction/","title":"Introduction","text":"<p>In this example, we will use the previous code and add new functionality to it for sending a transaction request to the wallet.</p>"},{"location":"user-guide/sending-transaction/#description","title":"Description","text":"<ul> <li> <p>send_transaction:   The main method of the ATCManager class, used to present users with a window for sending and confirming a transaction.</p> </li> <li> <p>SendTransactionCallbacks:   The core set of callbacks required by the <code>send_transaction</code> method. It plays a decisive role in   circulation actions during sending and after confirmation of the transaction.</p> </li> </ul>"},{"location":"user-guide/sending-transaction/#callback-examples","title":"Callback Examples","text":"<p>In our example, two new callback functions will be created: <code>send_amount_ton_window</code> and <code>transaction_info_windows</code>.</p> <ul> <li> <p>before_callback: <code>send_amount_ton_window</code>   This callback is used when the \"Submit Transaction\" button is clicked to prompt the user to enter the amount of TON to   send to the wallet.</p> </li> <li> <p>after_callback: <code>transaction_info_windows</code>   This callback is a window that displays information about the submitted transaction. It will also have a button to go   to the main menu.</p> </li> </ul>"},{"location":"user-guide/sending-transaction/#writing-windows","title":"Writing Windows","text":"<p>This section defines window functions for callbacks and user state.Let's add two new states to it. Open the <code>windows.py</code> file and insert the following code:</p>"},{"location":"user-guide/sending-transaction/#user-state","title":"User State","text":"windows.py<pre><code>from aiogram.fsm.state import StatesGroup, State\nfrom aiogram_tonconnect import ATCManager\nfrom aiogram_tonconnect.tonconnect.models import AccountWallet, AppWallet\n\n\n# Define a state group for the user with two states\nclass UserState(StatesGroup):\n    select_language = State()\n    main_menu = State()\n    send_amount_ton = State()  # new\n    transaction_info = State()  # new\n</code></pre> <p>In this section, a custom UserState class is defined, which extends the StatesGroup class from the aiogram.fsm.state module. It represents different states that the user can be in.</p>"},{"location":"user-guide/sending-transaction/#send-amount-ton-window","title":"Send Amount TON Window","text":"windows.py<pre><code>async def send_amount_ton_window(atc_manager: ATCManager, **_) -&gt; None:\n    \"\"\"\n    Displays the window for sending TON.\n\n    :param atc_manager: ATCManager instance for managing TON Connect integration.\n    :param _: Unused data from the middleware.\n    :return: None\n    \"\"\"\n    # Determine text based on user's language\n    text = (\n        \"How much TON do you want to send?\"\n        if atc_manager.user.language_code == \"en\" else\n        \"\u0421\u043a\u043e\u043b\u044c\u043a\u043e TON \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c?\"\n    )\n    button_text = \"\u2039 Back\" if atc_manager.user.language_code == \"en\" else \"\u2039 \u041d\u0430\u0437\u0430\u0434\"\n    reply_markup = Markup(inline_keyboard=[\n        [Button(text=button_text, callback_data=\"back\")]\n    ])\n\n    # Send the message and update user state\n    await atc_manager._send_message(text, reply_markup=reply_markup)\n    await atc_manager.state.set_state(UserState.send_amount_ton)\n</code></pre> <p>This function represents the window for sending the TON amount. It generates text based on the user's language and creates an inline keyboard for navigation.</p>"},{"location":"user-guide/sending-transaction/#transaction-info-window","title":"Transaction Info Window","text":"windows.py<pre><code>async def transaction_info_windows(atc_manager: ATCManager, boc: str, **_) -&gt; None:\n    \"\"\"\n    Displays the transaction information window.\n\n    :param atc_manager: ATCManager instance for managing TON Connect integration.\n    :param boc: The BOC (Bag of Cells) representing the transaction.\n    :param _: Unused data from the middleware.\n    :return: None\n    \"\"\"\n    # Determine text based on user's language and show transaction details\n    text = (\n        \"Transaction successfully sent!\\n\\n\"\n        f\"boc:\\n{boc}\"\n        if atc_manager.user.language_code == \"en\" else\n        \"\u0422\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430!\\n\\n\"\n        f\"boc:\\n{boc}\"\n    )\n    button_text = \"\u2039 Go to main\" if atc_manager.user.language_code == \"en\" else \"\u2039 \u041d\u0430 \u0433\u043b\u0430\u0432\u043d\u0443\u044e\"\n    reply_markup = Markup(inline_keyboard=[\n        [Button(text=button_text, callback_data=\"go_to_main\")]\n    ])\n\n    # Send the message and update user state\n    await atc_manager._send_message(text, reply_markup=reply_markup)\n    await atc_manager.state.set_state(UserState.transaction_info)\n</code></pre> <p>This function represents the transaction information window. It generates text based on the user's language and includes transaction details with an option to go back to the main menu.</p>"},{"location":"user-guide/sending-transaction/#writing-handlers","title":"Writing Handlers","text":"<p>This section defines command and callback request handlers. We need to modify the main menu handler to process the \u201csend transaction\u201d button and add new handlers. Open the handlers.py file and paste the following code:</p>"},{"location":"user-guide/sending-transaction/#router-configuration","title":"Router Configuration","text":"handlers.py<pre><code>from contextlib import suppress\nfrom aiogram import Router, F\nfrom aiogram.enums import ChatType\nfrom aiogram.filters import Command\nfrom aiogram.types import Message, CallbackQuery\nfrom pytonconnect.exceptions import WalletNotConnectedError\n\nfrom aiogram_tonconnect import ATCManager\nfrom aiogram_tonconnect.tonconnect.models import (\n    ConnectWalletCallbacks,\n    SendTransactionCallbacks,  # new\n)\n\nfrom .windows import (\n    UserState,\n    main_menu_window,\n    select_language_window,\n    send_amount_ton_window,  # new\n    transaction_info_windows,  # new\n)\n\n# Router Configuration\nrouter = Router()\nrouter.message.filter(F.chat.type == ChatType.PRIVATE)\nrouter.callback_query.filter(F.message.chat.type == ChatType.PRIVATE)\n</code></pre> <p>The router is configured to filter messages and callback queries only from private chats.</p>"},{"location":"user-guide/sending-transaction/#main-menu-handler","title":"Main Menu Handler","text":"handlers.py<pre><code>@router.callback_query(UserState.main_menu)\nasync def main_menu_handler(call: CallbackQuery, atc_manager: ATCManager) -&gt; None:\n    \"\"\"\n    Handler for the main menu callback.\n\n    :param call: The CallbackQuery object representing the callback.\n    :param atc_manager: ATCManager instance for managing TON Connect integration.\n    :return: None\n    \"\"\"\n    # Check if the user clicked the \"disconnect\" button\n    if call.data == \"disconnect\":\n        # Check if wallet is connected before attempting to disconnect\n        if atc_manager.tonconnect.connected:\n            # Disconnect from the wallet\n            await atc_manager.disconnect_wallet()\n\n        # Create ConnectWalletCallbacks object with before_callback\n        # and after_callback functions\n        callbacks = ConnectWalletCallbacks(\n            before_callback=select_language_window,\n            after_callback=main_menu_window,\n        )\n\n        # Open the connect wallet window using the ATCManager instance\n        # and the specified callbacks\n        await atc_manager.connect_wallet(callbacks)\n\n    elif call.data == \"send_amount_ton\":\n        await send_amount_ton_window(atc_manager)\n\n    # Acknowledge the callback query\n    await call.answer()\n</code></pre> <p>This handler fires when the user interacts with the main menu. It now handles disconnecting from the wallet and go to the TON sending amount window.</p>"},{"location":"user-guide/sending-transaction/#send-amount-ton-handler","title":"Send Amount TON Handler","text":"handlers.py<pre><code>@router.callback_query(UserState.send_amount_ton)\nasync def send_amount_ton_handler(call: CallbackQuery, atc_manager: ATCManager, **data) -&gt; None:\n    \"\"\"\n    Handler for the send amount TON callback.\n\n    :param call: The CallbackQuery object representing the callback.\n    :param atc_manager: ATCManager instance for managing TON Connect integration.\n    :return: None\n    \"\"\"\n    # Check if the \"back\" button is pressed\n    if call.data == \"back\":\n        # Navigate back to the main menu\n        await main_menu_window(atc_manager, **data)\n\n    # Acknowledge the callback query\n    await call.answer()\n</code></pre> <p>This handler is triggered when a user interacts with the send amount TON window. It handles navigating back to the main menu.</p>"},{"location":"user-guide/sending-transaction/#send-amount-ton-message-handler","title":"Send Amount TON Message Handler","text":"handlers.py<pre><code>@router.message(UserState.send_amount_ton)\nasync def send_amount_ton_message_handler(message: Message, atc_manager: ATCManager) -&gt; None:\n    \"\"\"\n    Handler for sending the TON amount.\n\n    :param message: The Message object representing the incoming message.\n    :param atc_manager: ATCManager instance for managing TON Connect integration.\n    :return: None\n    \"\"\"\n    # Check if the message content type is text\n    if message.content_type == \"text\":\n        # Validate the entered amount as a float\n        def validate_amount(amount: str) -&gt; Union[float, None]:\n            try:\n                amount = float(amount.replace(',', '.'))\n            except ValueError:\n                return None\n            return amount\n\n        # Get the validated amount\n        amount_ton = validate_amount(message.text)\n        # If the amount is valid, create a TONTransferTransaction\n        if amount_ton:\n            transaction = TONTransferTransaction(\n                address=atc_manager.user.account_wallet.address,\n                amount=amount_ton,\n                comment=\"Hello from @aiogramTONConnectBot!\"\n            )\n            # Set up callbacks for the transaction\n            callbacks = SendTransactionCallbacks(\n                before_callback=send_amount_ton_window,\n                after_callback=transaction_info_windows,\n            )\n            # Open the window for sending the transaction using the ATCManager instance\n            await atc_manager.send_transaction(\n                callbacks=callbacks,\n                transaction=transaction,\n            )\n\n    # Delete the original message containing the amount input\n    await message.delete()\n</code></pre> <p>This handler is triggered when a user sends a message in the send amount TON state. It validates the entered amount, creates a TONTransferTransaction, and opens the window for sending the transaction.</p>"},{"location":"user-guide/sending-transaction/#transaction-info-handler","title":"Transaction Info Handler","text":"handlers.py<pre><code>@router.callback_query(UserState.transaction_info)\nasync def transaction_info_handler(call: CallbackQuery, atc_manager: ATCManager, **data) -&gt; None:\n    \"\"\"\n    Handler for the transaction information callback.\n\n    :param call: The CallbackQuery object representing the callback.\n    :param atc_manager: ATCManager instance for managing TON Connect integration.\n    :return: None\n    \"\"\"\n    # Check if the \"go_to_main\" button is pressed\n    if call.data == \"go_to_main\":\n        # Navigate back to the main menu\n        await main_menu_window(atc_manager, **data)\n\n    # Acknowledge the callback query\n    await call.answer()\n</code></pre> <p>This handler is triggered when a user interacts with the transaction information window. It handles the transition back to the main menu.</p>"},{"location":"user-guide/sending-transaction/#running-the-bot","title":"Running the Bot","text":"<p>To run the Bot, use the following command in your terminal:</p> <pre><code>python -m bot\n</code></pre> <p>The bot source code is available on GitHub.</p>"}]}